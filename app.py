# Import the necessary modules
import requests
from flask import Flask, render_template, request

# Create a Flask application instance
app = Flask(__name__)

results = []
access_token = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# Define the route for the application's homepage
@app.route("/", methods=["GET", "POST"])
def index():
    # Set the base URL for the NVD API
    nvd_base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"

    # Set the headers for the NVD API request
    nvd_headers = {
        "Accept": "application/json"
    }

    # Set the base URL for the GitHub API
    github_base_url = "https://api.github.com"


    # Set the headers for the GitHub API request
    github_headers = {
        "Authorization": f"Bearer {access_token}",
        "Accept": "application/vnd.github+json"
    }

    # Set the date range for the NVD API request
    start_date = "2022-12-01"+"T13:00:00.000%2B01:00"  # Start date for the search (YYYY-MM-DD)
    end_date = "2022-12-22"+"T13:36:00.000%2B01:00"  # End date for the search (YYYY-MM-DD)

    # Set the URL for the NVD API request
    #https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=2021-08-04T13:00:00.000%2B01:00&lastModEndDate=2021-10-22T13:36:00.000%2B01:00
    nvd_url = f"{nvd_base_url}/?lastModStartDate={start_date}&lastModEndDate={end_date}"
    
    # Send the NVD API request and get the response
    nvd_response = requests.get(nvd_url, headers=nvd_headers)
    #print(nvd_response.json())
    
    # Check the status code of the response
    if nvd_response.status_code == 200:
        # If the request was successful, parse the JSON data from the response
        nvd_data = nvd_response.json()
        
        # Get the list of new CVEs from the response
        cves = nvd_data["vulnerabilities"]

        # Loop through the list of new CVEs
        for cve in cves:
            # Get the CVE ID and description
            cve_id = cve["cve"]["id"]
            cve_description = cve["cve"]["descriptions"][0]["value"]

            #Set the URL for the GitHub API search request
            github_url = f"{github_base_url}/search/code?q={cve_id}+in:file"

            # Send the GitHub API search request and get the response
            github_response = requests.get(github_url, headers=github_headers)

            # Check the status code of the response
            if github_response.status_code == 200:
                # If the request was successful, parse the JSON data from the response
                github_data = github_response.json()

                # Get the number of search results and the list of repositories
                total_count = github_data["total_count"]
                repositories = github_data["items"]

                # Loop through the list of repositories
                for repository in repositories:
                    # Get the repository name and URL
                    repo_name = repository["repository"]["full_name"]
                    repo_url = repository["repository"]["html_url"]

                    # Add the repository information to the list of results
                    results.append({
                        "cve_id": cve_id,
                        "cve_description": cve_description,
                        "repo_name": repo_name,
                        "repo_url": repo_url
                    })
    # Render the results template and pass the results list as a variable
    return render_template("results.html", results=results)

if __name__ == '__main__':
    app.run(debug=True)
